// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudparts {
namespace log {
namespace data {
class TxInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxInfo> {
} _TxInfo_default_instance_;
class LogRec_TagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogRec_Tag> {
} _LogRec_Tag_default_instance_;
class LogRecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogRec> {
} _LogRec_default_instance_;

namespace protobuf_data_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, tx_scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, tx_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, tx_branch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInfo, tx_event_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec_Tag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec_Tag, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec_Tag, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, when_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, svc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRec, severity_),
  6,
  7,
  0,
  8,
  1,
  ~0u,
  5,
  2,
  3,
  4,
  9,
  10,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(TxInfo)},
  { 12, 18, sizeof(LogRec_Tag)},
  { 20, 36, sizeof(LogRec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRec_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRec_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _TxInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LogRec_Tag_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LogRec_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TxInfo_default_instance_.DefaultConstruct();
  _LogRec_Tag_default_instance_.DefaultConstruct();
  _LogRec_default_instance_.DefaultConstruct();
  _LogRec_default_instance_.get_mutable()->tx_ = const_cast< ::cloudparts::log::data::TxInfo*>(
      ::cloudparts::log::data::TxInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ndata.proto\022\023cloudparts.log.data\"\223\003\n\006Tx"
      "Info\022\020\n\010tx_scope\030\001 \001(\t\022\r\n\005tx_id\030\002 \002(\004\022\021\n"
      "\ttx_branch\030\003 \001(\004\0222\n\010tx_event\030\004 \002(\0162 .clo"
      "udparts.log.data.TxInfo.TEvt\"\240\002\n\004TEvt\022\t\n"
      "\005begin\020\000\022\013\n\007prepare\020\001\022\022\n\016primary_commit\020"
      "\002\022\024\n\020primary_rollback\020\003\022\014\n\010time_out\020\004\022\020\n"
      "\014branch_begin\020\005\022\022\n\016branch_prepare\020\006\022\021\n\rb"
      "ranch_commit\020\007\022\023\n\017branch_rollback\020\010\022\023\n\017b"
      "ranch_time_out\020\t\022\021\n\rbackup_commit\020\n\022\023\n\017b"
      "ackup_rollback\020\013\022\022\n\016recovery_begin\020\014\022\022\n\016"
      "recovery_check\020\r\022\025\n\021recovery_complete\020\016\""
      "\241\002\n\006LogRec\022\021\n\tpartition\030\001 \001(\004\022\016\n\006offset\030"
      "\002 \001(\004\022\013\n\003key\030\003 \001(\t\022\014\n\004when\030\004 \001(\004\022\013\n\003msg\030"
      "\005 \001(\t\022-\n\004tags\030\006 \003(\0132\037.cloudparts.log.dat"
      "a.LogRec.Tag\022\'\n\002tx\030\007 \001(\0132\033.cloudparts.lo"
      "g.data.TxInfo\022\013\n\003svc\030\010 \001(\t\022\020\n\010instance\030\t"
      " \001(\t\022\017\n\007session\030\n \001(\t\022\020\n\010facility\030\013 \001(\r\022"
      "\020\n\010severity\030\014 \001(\r\032 \n\003Tag\022\014\n\004name\030\001 \002(\t\022\013"
      "\n\003val\030\002 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 731);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_data_2eproto

const ::google::protobuf::EnumDescriptor* TxInfo_TEvt_descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_enum_descriptors[0];
}
bool TxInfo_TEvt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TxInfo_TEvt TxInfo::begin;
const TxInfo_TEvt TxInfo::prepare;
const TxInfo_TEvt TxInfo::primary_commit;
const TxInfo_TEvt TxInfo::primary_rollback;
const TxInfo_TEvt TxInfo::time_out;
const TxInfo_TEvt TxInfo::branch_begin;
const TxInfo_TEvt TxInfo::branch_prepare;
const TxInfo_TEvt TxInfo::branch_commit;
const TxInfo_TEvt TxInfo::branch_rollback;
const TxInfo_TEvt TxInfo::branch_time_out;
const TxInfo_TEvt TxInfo::backup_commit;
const TxInfo_TEvt TxInfo::backup_rollback;
const TxInfo_TEvt TxInfo::recovery_begin;
const TxInfo_TEvt TxInfo::recovery_check;
const TxInfo_TEvt TxInfo::recovery_complete;
const TxInfo_TEvt TxInfo::TEvt_MIN;
const TxInfo_TEvt TxInfo::TEvt_MAX;
const int TxInfo::TEvt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxInfo::kTxScopeFieldNumber;
const int TxInfo::kTxIdFieldNumber;
const int TxInfo::kTxBranchFieldNumber;
const int TxInfo::kTxEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxInfo::TxInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudparts.log.data.TxInfo)
}
TxInfo::TxInfo(const TxInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tx_scope()) {
    tx_scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_scope_);
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    reinterpret_cast<char*>(&tx_event_) -
    reinterpret_cast<char*>(&tx_id_) + sizeof(tx_event_));
  // @@protoc_insertion_point(copy_constructor:cloudparts.log.data.TxInfo)
}

void TxInfo::SharedCtor() {
  _cached_size_ = 0;
  tx_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_id_, 0, reinterpret_cast<char*>(&tx_event_) -
    reinterpret_cast<char*>(&tx_id_) + sizeof(tx_event_));
}

TxInfo::~TxInfo() {
  // @@protoc_insertion_point(destructor:cloudparts.log.data.TxInfo)
  SharedDtor();
}

void TxInfo::SharedDtor() {
  tx_scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxInfo::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[0].descriptor;
}

const TxInfo& TxInfo::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxInfo* TxInfo::New(::google::protobuf::Arena* arena) const {
  TxInfo* n = new TxInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudparts.log.data.TxInfo)
  if (has_tx_scope()) {
    GOOGLE_DCHECK(!tx_scope_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tx_scope_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&tx_id_, 0, reinterpret_cast<char*>(&tx_event_) -
      reinterpret_cast<char*>(&tx_id_) + sizeof(tx_event_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudparts.log.data.TxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tx_scope = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tx_scope().data(), this->tx_scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.TxInfo.tx_scope");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 tx_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_tx_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_branch = 3;
      case 3: {
        if (tag == 24u) {
          set_has_tx_branch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_branch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudparts::log::data::TxInfo_TEvt_IsValid(value)) {
            set_tx_event(static_cast< ::cloudparts::log::data::TxInfo_TEvt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudparts.log.data.TxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudparts.log.data.TxInfo)
  return false;
#undef DO_
}

void TxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudparts.log.data.TxInfo)
  // optional string tx_scope = 1;
  if (has_tx_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tx_scope().data(), this->tx_scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.TxInfo.tx_scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tx_scope(), output);
  }

  // required uint64 tx_id = 2;
  if (has_tx_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tx_id(), output);
  }

  // optional uint64 tx_branch = 3;
  if (has_tx_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tx_branch(), output);
  }

  // required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
  if (has_tx_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tx_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudparts.log.data.TxInfo)
}

::google::protobuf::uint8* TxInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cloudparts.log.data.TxInfo)
  // optional string tx_scope = 1;
  if (has_tx_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tx_scope().data(), this->tx_scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.TxInfo.tx_scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tx_scope(), target);
  }

  // required uint64 tx_id = 2;
  if (has_tx_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tx_id(), target);
  }

  // optional uint64 tx_branch = 3;
  if (has_tx_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tx_branch(), target);
  }

  // required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
  if (has_tx_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tx_event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudparts.log.data.TxInfo)
  return target;
}

size_t TxInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cloudparts.log.data.TxInfo)
  size_t total_size = 0;

  if (has_tx_id()) {
    // required uint64 tx_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_id());
  }

  if (has_tx_event()) {
    // required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_event());
  }

  return total_size;
}
size_t TxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudparts.log.data.TxInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required uint64 tx_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_id());

    // required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_event());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string tx_scope = 1;
  if (has_tx_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_scope());
  }

  // optional uint64 tx_branch = 3;
  if (has_tx_branch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_branch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudparts.log.data.TxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TxInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudparts.log.data.TxInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudparts.log.data.TxInfo)
    MergeFrom(*source);
  }
}

void TxInfo::MergeFrom(const TxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudparts.log.data.TxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_tx_scope()) {
      set_has_tx_scope();
      tx_scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_scope_);
    }
    if (from.has_tx_id()) {
      set_tx_id(from.tx_id());
    }
    if (from.has_tx_branch()) {
      set_tx_branch(from.tx_branch());
    }
    if (from.has_tx_event()) {
      set_tx_event(from.tx_event());
    }
  }
}

void TxInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudparts.log.data.TxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxInfo::CopyFrom(const TxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudparts.log.data.TxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  return true;
}

void TxInfo::Swap(TxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxInfo::InternalSwap(TxInfo* other) {
  tx_scope_.Swap(&other->tx_scope_);
  std::swap(tx_id_, other->tx_id_);
  std::swap(tx_branch_, other->tx_branch_);
  std::swap(tx_event_, other->tx_event_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxInfo::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxInfo

// optional string tx_scope = 1;
bool TxInfo::has_tx_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TxInfo::set_has_tx_scope() {
  _has_bits_[0] |= 0x00000001u;
}
void TxInfo::clear_has_tx_scope() {
  _has_bits_[0] &= ~0x00000001u;
}
void TxInfo::clear_tx_scope() {
  tx_scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_scope();
}
const ::std::string& TxInfo::tx_scope() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.TxInfo.tx_scope)
  return tx_scope_.GetNoArena();
}
void TxInfo::set_tx_scope(const ::std::string& value) {
  set_has_tx_scope();
  tx_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.TxInfo.tx_scope)
}
#if LANG_CXX11
void TxInfo::set_tx_scope(::std::string&& value) {
  set_has_tx_scope();
  tx_scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.TxInfo.tx_scope)
}
#endif
void TxInfo::set_tx_scope(const char* value) {
  set_has_tx_scope();
  tx_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.TxInfo.tx_scope)
}
void TxInfo::set_tx_scope(const char* value, size_t size) {
  set_has_tx_scope();
  tx_scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.TxInfo.tx_scope)
}
::std::string* TxInfo::mutable_tx_scope() {
  set_has_tx_scope();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.TxInfo.tx_scope)
  return tx_scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxInfo::release_tx_scope() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.TxInfo.tx_scope)
  clear_has_tx_scope();
  return tx_scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxInfo::set_allocated_tx_scope(::std::string* tx_scope) {
  if (tx_scope != NULL) {
    set_has_tx_scope();
  } else {
    clear_has_tx_scope();
  }
  tx_scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_scope);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.TxInfo.tx_scope)
}

// required uint64 tx_id = 2;
bool TxInfo::has_tx_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TxInfo::set_has_tx_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TxInfo::clear_has_tx_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TxInfo::clear_tx_id() {
  tx_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_id();
}
::google::protobuf::uint64 TxInfo::tx_id() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.TxInfo.tx_id)
  return tx_id_;
}
void TxInfo::set_tx_id(::google::protobuf::uint64 value) {
  set_has_tx_id();
  tx_id_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.TxInfo.tx_id)
}

// optional uint64 tx_branch = 3;
bool TxInfo::has_tx_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TxInfo::set_has_tx_branch() {
  _has_bits_[0] |= 0x00000004u;
}
void TxInfo::clear_has_tx_branch() {
  _has_bits_[0] &= ~0x00000004u;
}
void TxInfo::clear_tx_branch() {
  tx_branch_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_branch();
}
::google::protobuf::uint64 TxInfo::tx_branch() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.TxInfo.tx_branch)
  return tx_branch_;
}
void TxInfo::set_tx_branch(::google::protobuf::uint64 value) {
  set_has_tx_branch();
  tx_branch_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.TxInfo.tx_branch)
}

// required .cloudparts.log.data.TxInfo.TEvt tx_event = 4;
bool TxInfo::has_tx_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TxInfo::set_has_tx_event() {
  _has_bits_[0] |= 0x00000008u;
}
void TxInfo::clear_has_tx_event() {
  _has_bits_[0] &= ~0x00000008u;
}
void TxInfo::clear_tx_event() {
  tx_event_ = 0;
  clear_has_tx_event();
}
::cloudparts::log::data::TxInfo_TEvt TxInfo::tx_event() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.TxInfo.tx_event)
  return static_cast< ::cloudparts::log::data::TxInfo_TEvt >(tx_event_);
}
void TxInfo::set_tx_event(::cloudparts::log::data::TxInfo_TEvt value) {
  assert(::cloudparts::log::data::TxInfo_TEvt_IsValid(value));
  set_has_tx_event();
  tx_event_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.TxInfo.tx_event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRec_Tag::kNameFieldNumber;
const int LogRec_Tag::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRec_Tag::LogRec_Tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudparts.log.data.LogRec.Tag)
}
LogRec_Tag::LogRec_Tag(const LogRec_Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  // @@protoc_insertion_point(copy_constructor:cloudparts.log.data.LogRec.Tag)
}

void LogRec_Tag::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogRec_Tag::~LogRec_Tag() {
  // @@protoc_insertion_point(destructor:cloudparts.log.data.LogRec.Tag)
  SharedDtor();
}

void LogRec_Tag::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRec_Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRec_Tag::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[1].descriptor;
}

const LogRec_Tag& LogRec_Tag::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRec_Tag* LogRec_Tag::New(::google::protobuf::Arena* arena) const {
  LogRec_Tag* n = new LogRec_Tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRec_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudparts.log.data.LogRec.Tag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_val()) {
      GOOGLE_DCHECK(!val_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRec_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudparts.log.data.LogRec.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.Tag.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string val = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.Tag.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudparts.log.data.LogRec.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudparts.log.data.LogRec.Tag)
  return false;
#undef DO_
}

void LogRec_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudparts.log.data.LogRec.Tag)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.Tag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.Tag.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudparts.log.data.LogRec.Tag)
}

::google::protobuf::uint8* LogRec_Tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cloudparts.log.data.LogRec.Tag)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.Tag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.Tag.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudparts.log.data.LogRec.Tag)
  return target;
}

size_t LogRec_Tag::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cloudparts.log.data.LogRec.Tag)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  return total_size;
}
size_t LogRec_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudparts.log.data.LogRec.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRec_Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudparts.log.data.LogRec.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRec_Tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRec_Tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudparts.log.data.LogRec.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudparts.log.data.LogRec.Tag)
    MergeFrom(*source);
  }
}

void LogRec_Tag::MergeFrom(const LogRec_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudparts.log.data.LogRec.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_val()) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
  }
}

void LogRec_Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudparts.log.data.LogRec.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRec_Tag::CopyFrom(const LogRec_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudparts.log.data.LogRec.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRec_Tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LogRec_Tag::Swap(LogRec_Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRec_Tag::InternalSwap(LogRec_Tag* other) {
  name_.Swap(&other->name_);
  val_.Swap(&other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRec_Tag::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRec_Tag

// required string name = 1;
bool LogRec_Tag::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRec_Tag::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRec_Tag::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRec_Tag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LogRec_Tag::name() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.Tag.name)
  return name_.GetNoArena();
}
void LogRec_Tag::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.Tag.name)
}
#if LANG_CXX11
void LogRec_Tag::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.Tag.name)
}
#endif
void LogRec_Tag::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.Tag.name)
}
void LogRec_Tag::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.Tag.name)
}
::std::string* LogRec_Tag::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.Tag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec_Tag::release_name() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.Tag.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec_Tag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.Tag.name)
}

// required string val = 2;
bool LogRec_Tag::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRec_Tag::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRec_Tag::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRec_Tag::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
const ::std::string& LogRec_Tag::val() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.Tag.val)
  return val_.GetNoArena();
}
void LogRec_Tag::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.Tag.val)
}
#if LANG_CXX11
void LogRec_Tag::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.Tag.val)
}
#endif
void LogRec_Tag::set_val(const char* value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.Tag.val)
}
void LogRec_Tag::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.Tag.val)
}
::std::string* LogRec_Tag::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.Tag.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec_Tag::release_val() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.Tag.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec_Tag::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.Tag.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRec::kPartitionFieldNumber;
const int LogRec::kOffsetFieldNumber;
const int LogRec::kKeyFieldNumber;
const int LogRec::kWhenFieldNumber;
const int LogRec::kMsgFieldNumber;
const int LogRec::kTagsFieldNumber;
const int LogRec::kTxFieldNumber;
const int LogRec::kSvcFieldNumber;
const int LogRec::kInstanceFieldNumber;
const int LogRec::kSessionFieldNumber;
const int LogRec::kFacilityFieldNumber;
const int LogRec::kSeverityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRec::LogRec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudparts.log.data.LogRec)
}
LogRec::LogRec(const LogRec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  svc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_svc()) {
    svc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svc_);
  }
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instance()) {
    instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
  }
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session()) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_tx()) {
    tx_ = new ::cloudparts::log::data::TxInfo(*from.tx_);
  } else {
    tx_ = NULL;
  }
  ::memcpy(&partition_, &from.partition_,
    reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&partition_) + sizeof(severity_));
  // @@protoc_insertion_point(copy_constructor:cloudparts.log.data.LogRec)
}

void LogRec::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_, 0, reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&tx_) + sizeof(severity_));
}

LogRec::~LogRec() {
  // @@protoc_insertion_point(destructor:cloudparts.log.data.LogRec)
  SharedDtor();
}

void LogRec::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tx_;
  }
}

void LogRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRec::descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[2].descriptor;
}

const LogRec& LogRec::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRec* LogRec::New(::google::protobuf::Arena* arena) const {
  LogRec* n = new LogRec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRec::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudparts.log.data.LogRec)
  tags_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_svc()) {
      GOOGLE_DCHECK(!svc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*svc_.UnsafeRawStringPointer())->clear();
    }
    if (has_instance()) {
      GOOGLE_DCHECK(!instance_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instance_.UnsafeRawStringPointer())->clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(!session_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_.UnsafeRawStringPointer())->clear();
    }
    if (has_tx()) {
      GOOGLE_DCHECK(tx_ != NULL);
      tx_->::cloudparts::log::data::TxInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&partition_, 0, reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&partition_) + sizeof(offset_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&when_, 0, reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&when_) + sizeof(severity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloudparts.log.data.LogRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 partition = 1;
      case 1: {
        if (tag == 8u) {
          set_has_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 offset = 2;
      case 2: {
        if (tag == 16u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 when = 4;
      case 4: {
        if (tag == 32u) {
          set_has_when();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &when_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cloudparts.log.data.LogRec.Tag tags = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .cloudparts.log.data.TxInfo tx = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string svc = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->svc().data(), this->svc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.svc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instance = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.instance");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudparts.log.data.LogRec.session");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 facility = 11;
      case 11: {
        if (tag == 88u) {
          set_has_facility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 severity = 12;
      case 12: {
        if (tag == 96u) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloudparts.log.data.LogRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloudparts.log.data.LogRec)
  return false;
#undef DO_
}

void LogRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloudparts.log.data.LogRec)
  // optional uint64 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->partition(), output);
  }

  // optional uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional uint64 when = 4;
  if (has_when()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->when(), output);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // repeated .cloudparts.log.data.LogRec.Tag tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tags(i), output);
  }

  // optional .cloudparts.log.data.TxInfo tx = 7;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tx_, output);
  }

  // optional string svc = 8;
  if (has_svc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svc().data(), this->svc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.svc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->svc(), output);
  }

  // optional string instance = 9;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->instance(), output);
  }

  // optional string session = 10;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->session(), output);
  }

  // optional uint32 facility = 11;
  if (has_facility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->facility(), output);
  }

  // optional uint32 severity = 12;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->severity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloudparts.log.data.LogRec)
}

::google::protobuf::uint8* LogRec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cloudparts.log.data.LogRec)
  // optional uint64 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->partition(), target);
  }

  // optional uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional uint64 when = 4;
  if (has_when()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->when(), target);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // repeated .cloudparts.log.data.LogRec.Tag tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->tags(i), false, target);
  }

  // optional .cloudparts.log.data.TxInfo tx = 7;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tx_, false, target);
  }

  // optional string svc = 8;
  if (has_svc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svc().data(), this->svc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.svc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->svc(), target);
  }

  // optional string instance = 9;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->instance(), target);
  }

  // optional string session = 10;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudparts.log.data.LogRec.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session(), target);
  }

  // optional uint32 facility = 11;
  if (has_facility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->facility(), target);
  }

  // optional uint32 severity = 12;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->severity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudparts.log.data.LogRec)
  return target;
}

size_t LogRec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudparts.log.data.LogRec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .cloudparts.log.data.LogRec.Tag tags = 6;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string svc = 8;
    if (has_svc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svc());
    }

    // optional string instance = 9;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance());
    }

    // optional string session = 10;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional .cloudparts.log.data.TxInfo tx = 7;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tx_);
    }

    // optional uint64 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partition());
    }

    // optional uint64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 when = 4;
    if (has_when()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->when());
    }

    // optional uint32 facility = 11;
    if (has_facility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facility());
    }

    // optional uint32 severity = 12;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudparts.log.data.LogRec)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudparts.log.data.LogRec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudparts.log.data.LogRec)
    MergeFrom(*source);
  }
}

void LogRec::MergeFrom(const LogRec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudparts.log.data.LogRec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_svc()) {
      set_has_svc();
      svc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svc_);
    }
    if (from.has_instance()) {
      set_has_instance();
      instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
    }
    if (from.has_session()) {
      set_has_session();
      session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
    }
    if (from.has_tx()) {
      mutable_tx()->::cloudparts::log::data::TxInfo::MergeFrom(from.tx());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & 1792u) {
    if (from.has_when()) {
      set_when(from.when());
    }
    if (from.has_facility()) {
      set_facility(from.facility());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
  }
}

void LogRec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudparts.log.data.LogRec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRec::CopyFrom(const LogRec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudparts.log.data.LogRec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRec::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  if (has_tx()) {
    if (!this->tx_->IsInitialized()) return false;
  }
  return true;
}

void LogRec::Swap(LogRec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRec::InternalSwap(LogRec* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  key_.Swap(&other->key_);
  msg_.Swap(&other->msg_);
  svc_.Swap(&other->svc_);
  instance_.Swap(&other->instance_);
  session_.Swap(&other->session_);
  std::swap(tx_, other->tx_);
  std::swap(partition_, other->partition_);
  std::swap(offset_, other->offset_);
  std::swap(when_, other->when_);
  std::swap(facility_, other->facility_);
  std::swap(severity_, other->severity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRec::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRec

// optional uint64 partition = 1;
bool LogRec::has_partition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogRec::set_has_partition() {
  _has_bits_[0] |= 0x00000040u;
}
void LogRec::clear_has_partition() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogRec::clear_partition() {
  partition_ = GOOGLE_ULONGLONG(0);
  clear_has_partition();
}
::google::protobuf::uint64 LogRec::partition() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.partition)
  return partition_;
}
void LogRec::set_partition(::google::protobuf::uint64 value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.partition)
}

// optional uint64 offset = 2;
bool LogRec::has_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogRec::set_has_offset() {
  _has_bits_[0] |= 0x00000080u;
}
void LogRec::clear_has_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogRec::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
::google::protobuf::uint64 LogRec::offset() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.offset)
  return offset_;
}
void LogRec::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.offset)
}

// optional string key = 3;
bool LogRec::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRec::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRec::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& LogRec::key() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.key)
  return key_.GetNoArena();
}
void LogRec::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.key)
}
#if LANG_CXX11
void LogRec::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.key)
}
#endif
void LogRec::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.key)
}
void LogRec::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.key)
}
::std::string* LogRec::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec::release_key() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.key)
}

// optional uint64 when = 4;
bool LogRec::has_when() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LogRec::set_has_when() {
  _has_bits_[0] |= 0x00000100u;
}
void LogRec::clear_has_when() {
  _has_bits_[0] &= ~0x00000100u;
}
void LogRec::clear_when() {
  when_ = GOOGLE_ULONGLONG(0);
  clear_has_when();
}
::google::protobuf::uint64 LogRec::when() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.when)
  return when_;
}
void LogRec::set_when(::google::protobuf::uint64 value) {
  set_has_when();
  when_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.when)
}

// optional string msg = 5;
bool LogRec::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRec::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRec::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRec::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& LogRec::msg() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.msg)
  return msg_.GetNoArena();
}
void LogRec::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.msg)
}
#if LANG_CXX11
void LogRec::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.msg)
}
#endif
void LogRec::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.msg)
}
void LogRec::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.msg)
}
::std::string* LogRec::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec::release_msg() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.msg)
}

// repeated .cloudparts.log.data.LogRec.Tag tags = 6;
int LogRec::tags_size() const {
  return tags_.size();
}
void LogRec::clear_tags() {
  tags_.Clear();
}
const ::cloudparts::log::data::LogRec_Tag& LogRec::tags(int index) const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.tags)
  return tags_.Get(index);
}
::cloudparts::log::data::LogRec_Tag* LogRec::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.tags)
  return tags_.Mutable(index);
}
::cloudparts::log::data::LogRec_Tag* LogRec::add_tags() {
  // @@protoc_insertion_point(field_add:cloudparts.log.data.LogRec.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::cloudparts::log::data::LogRec_Tag >*
LogRec::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:cloudparts.log.data.LogRec.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::cloudparts::log::data::LogRec_Tag >&
LogRec::tags() const {
  // @@protoc_insertion_point(field_list:cloudparts.log.data.LogRec.tags)
  return tags_;
}

// optional .cloudparts.log.data.TxInfo tx = 7;
bool LogRec::has_tx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogRec::set_has_tx() {
  _has_bits_[0] |= 0x00000020u;
}
void LogRec::clear_has_tx() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogRec::clear_tx() {
  if (tx_ != NULL) tx_->::cloudparts::log::data::TxInfo::Clear();
  clear_has_tx();
}
const ::cloudparts::log::data::TxInfo& LogRec::tx() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.tx)
  return tx_ != NULL ? *tx_
                         : *::cloudparts::log::data::TxInfo::internal_default_instance();
}
::cloudparts::log::data::TxInfo* LogRec::mutable_tx() {
  set_has_tx();
  if (tx_ == NULL) {
    tx_ = new ::cloudparts::log::data::TxInfo;
  }
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.tx)
  return tx_;
}
::cloudparts::log::data::TxInfo* LogRec::release_tx() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.tx)
  clear_has_tx();
  ::cloudparts::log::data::TxInfo* temp = tx_;
  tx_ = NULL;
  return temp;
}
void LogRec::set_allocated_tx(::cloudparts::log::data::TxInfo* tx) {
  delete tx_;
  tx_ = tx;
  if (tx) {
    set_has_tx();
  } else {
    clear_has_tx();
  }
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.tx)
}

// optional string svc = 8;
bool LogRec::has_svc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogRec::set_has_svc() {
  _has_bits_[0] |= 0x00000004u;
}
void LogRec::clear_has_svc() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogRec::clear_svc() {
  svc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svc();
}
const ::std::string& LogRec::svc() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.svc)
  return svc_.GetNoArena();
}
void LogRec::set_svc(const ::std::string& value) {
  set_has_svc();
  svc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.svc)
}
#if LANG_CXX11
void LogRec::set_svc(::std::string&& value) {
  set_has_svc();
  svc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.svc)
}
#endif
void LogRec::set_svc(const char* value) {
  set_has_svc();
  svc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.svc)
}
void LogRec::set_svc(const char* value, size_t size) {
  set_has_svc();
  svc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.svc)
}
::std::string* LogRec::mutable_svc() {
  set_has_svc();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.svc)
  return svc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec::release_svc() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.svc)
  clear_has_svc();
  return svc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec::set_allocated_svc(::std::string* svc) {
  if (svc != NULL) {
    set_has_svc();
  } else {
    clear_has_svc();
  }
  svc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svc);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.svc)
}

// optional string instance = 9;
bool LogRec::has_instance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogRec::set_has_instance() {
  _has_bits_[0] |= 0x00000008u;
}
void LogRec::clear_has_instance() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogRec::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instance();
}
const ::std::string& LogRec::instance() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.instance)
  return instance_.GetNoArena();
}
void LogRec::set_instance(const ::std::string& value) {
  set_has_instance();
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.instance)
}
#if LANG_CXX11
void LogRec::set_instance(::std::string&& value) {
  set_has_instance();
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.instance)
}
#endif
void LogRec::set_instance(const char* value) {
  set_has_instance();
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.instance)
}
void LogRec::set_instance(const char* value, size_t size) {
  set_has_instance();
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.instance)
}
::std::string* LogRec::mutable_instance() {
  set_has_instance();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec::release_instance() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.instance)
  clear_has_instance();
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    set_has_instance();
  } else {
    clear_has_instance();
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.instance)
}

// optional string session = 10;
bool LogRec::has_session() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogRec::set_has_session() {
  _has_bits_[0] |= 0x00000010u;
}
void LogRec::clear_has_session() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogRec::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session();
}
const ::std::string& LogRec::session() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.session)
  return session_.GetNoArena();
}
void LogRec::set_session(const ::std::string& value) {
  set_has_session();
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.session)
}
#if LANG_CXX11
void LogRec::set_session(::std::string&& value) {
  set_has_session();
  session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudparts.log.data.LogRec.session)
}
#endif
void LogRec::set_session(const char* value) {
  set_has_session();
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudparts.log.data.LogRec.session)
}
void LogRec::set_session(const char* value, size_t size) {
  set_has_session();
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudparts.log.data.LogRec.session)
}
::std::string* LogRec::mutable_session() {
  set_has_session();
  // @@protoc_insertion_point(field_mutable:cloudparts.log.data.LogRec.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRec::release_session() {
  // @@protoc_insertion_point(field_release:cloudparts.log.data.LogRec.session)
  clear_has_session();
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRec::set_allocated_session(::std::string* session) {
  if (session != NULL) {
    set_has_session();
  } else {
    clear_has_session();
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:cloudparts.log.data.LogRec.session)
}

// optional uint32 facility = 11;
bool LogRec::has_facility() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LogRec::set_has_facility() {
  _has_bits_[0] |= 0x00000200u;
}
void LogRec::clear_has_facility() {
  _has_bits_[0] &= ~0x00000200u;
}
void LogRec::clear_facility() {
  facility_ = 0u;
  clear_has_facility();
}
::google::protobuf::uint32 LogRec::facility() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.facility)
  return facility_;
}
void LogRec::set_facility(::google::protobuf::uint32 value) {
  set_has_facility();
  facility_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.facility)
}

// optional uint32 severity = 12;
bool LogRec::has_severity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LogRec::set_has_severity() {
  _has_bits_[0] |= 0x00000400u;
}
void LogRec::clear_has_severity() {
  _has_bits_[0] &= ~0x00000400u;
}
void LogRec::clear_severity() {
  severity_ = 0u;
  clear_has_severity();
}
::google::protobuf::uint32 LogRec::severity() const {
  // @@protoc_insertion_point(field_get:cloudparts.log.data.LogRec.severity)
  return severity_;
}
void LogRec::set_severity(::google::protobuf::uint32 value) {
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:cloudparts.log.data.LogRec.severity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace log
}  // namespace cloudparts

// @@protoc_insertion_point(global_scope)
